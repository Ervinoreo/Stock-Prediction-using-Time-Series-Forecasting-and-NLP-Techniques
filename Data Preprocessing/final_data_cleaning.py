# -*- coding: utf-8 -*-
"""Final Data Cleaning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZxDEYFcVTCJiX_cf1sB1o-IvzdovtTWK
"""

import csv

with open("tesla_data.csv", "r") as file:
  reader = csv.reader(file)
  data = list(reader)
  data[0].extend(["Percentage_change", "Combine"])

print(data[0])

data[1].append(0)
sentence = data[1][0] + data[1][2]
data[1].append(sentence)

print(data[1][5])


percentage = data[1][4]
price = data[1][3]
for i in range(2, len(data)):
  sentence = data[i][0] + data[i][2]
  if data[i][3] == price:
    data[i].append(percentage)
  else:
    data[i].append((float(data[i][3]) - float(price)) * 100 / float(price))
    date = data[i][1]
    percentage = data[i][4]
    price = data[i][3]
  data[i].append(sentence)

print(data[5])

with open('tesla_final_data.csv', 'w', newline='') as file:
    writer = csv.writer(file)
    writer.writerows(data)

print("CSV file edited successfully.")

import pandas as pd

file_path = "tesla_final_data.csv"

df = pd.read_csv(file_path)

print(df.head())

from sklearn.model_selection import train_test_split

X = df['Combine']
y = df['Percentage_change']

x_train, x_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 100)

from sklearn.feature_extraction.text import CountVectorizer

vectorizer = CountVectorizer()
vectorizer.fit(x_train)

X_train = vectorizer.transform(x_train)
X_test  = vectorizer.transform(x_test)
X_train

# from sklearn.linear_model import LogisticRegression
# from sklearn.datasets import load_iris
# from sklearn.model_selection import train_test_split

# # Load sample dataset (iris)
# iris = load_iris()
# X = iris.data
# y = iris.target

# # Split data into training and testing sets
# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# # Initialize and train the Logistic Regression classifier
# classifier = LogisticRegression()
# classifier.fit(X_train, y_train)

# # Evaluate the classifier
# score = classifier.score(X_test, y_test)
# print("Accuracy:", score)